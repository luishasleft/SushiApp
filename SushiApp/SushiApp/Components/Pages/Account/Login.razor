@page "/login"

@using System.Security.Claims
@using SushiApp.Models.ViewModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject SushiDbContext DbContext
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3text-center flex-column">
                <img src="/images/avatar" class="img-fluid" />
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>UserName</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" class="form-control" type="password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>







@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm] 
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;
    

    private async Task Authenticate()
    {
        var userAccount = DbContext.UserAccounts.Where(x => x.UserName == Model.UserName).FirstOrDefault();
        if (userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Invalid Username or Password";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.UserName),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }
}